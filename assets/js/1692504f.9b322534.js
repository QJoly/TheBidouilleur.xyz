"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2189],{4137:(e,t,s)=>{s.d(t,{Zo:()=>u,kt:()=>m});var n=s(7294);function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function a(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function i(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?a(Object(s),!0).forEach((function(t){r(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):a(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function o(e,t){if(null==e)return{};var s,n,r=function(e,t){if(null==e)return{};var s,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)s=a[n],t.indexOf(s)>=0||(r[s]=e[s]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)s=a[n],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(r[s]=e[s])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),s=t;return e&&(s="function"==typeof e?e(t):i(i({},t),e)),s},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",_={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var s=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(s),c=r,m=d["".concat(l,".").concat(c)]||d[c]||_[c]||a;return s?n.createElement(m,i(i({ref:t},u),{},{components:s})):n.createElement(m,i({ref:t},u))}));function m(e,t){var s=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=s.length,i=new Array(a);i[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<a;p++)i[p]=s[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,s)}c.displayName="MDXCreateElement"},839:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>_,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var n=s(7462),r=(s(7294),s(4137));const a={title:"V\xe9rification configuration syst\xe8me (testinfra)",slug:"testinfra",tags:["python","testinfra"],description:"Testinfra est une librairie Python permettant de faire des tests unitaires sur des conditions syst\xe8mes. Nous allons installer Testinfra et cr\xe9er 2-3 tests"},i=void 0,o={unversionedId:"Adminsys/testinfra",id:"Adminsys/testinfra",title:"V\xe9rification configuration syst\xe8me (testinfra)",description:"Testinfra est une librairie Python permettant de faire des tests unitaires sur des conditions syst\xe8mes. Nous allons installer Testinfra et cr\xe9er 2-3 tests",source:"@site/docs/Adminsys/testinfra.md",sourceDirName:"Adminsys",slug:"/Adminsys/testinfra",permalink:"/TheBidouilleur.xyz/docs/Adminsys/testinfra",draft:!1,editUrl:"https://github.com/QJoly/TheBidouilleur.xyz/tree/main/docs/Adminsys/testinfra.md",tags:[{label:"python",permalink:"/TheBidouilleur.xyz/docs/tags/python"},{label:"testinfra",permalink:"/TheBidouilleur.xyz/docs/tags/testinfra"}],version:"current",lastUpdatedAt:1687014029,formattedLastUpdatedAt:"17 juin 2023",frontMatter:{title:"V\xe9rification configuration syst\xe8me (testinfra)",slug:"testinfra",tags:["python","testinfra"],description:"Testinfra est une librairie Python permettant de faire des tests unitaires sur des conditions syst\xe8mes. Nous allons installer Testinfra et cr\xe9er 2-3 tests"},sidebar:"tutorialSidebar",previous:{title:"Stocker des secrets dans un d\xe9p\xf4t Git",permalink:"/TheBidouilleur.xyz/docs/Adminsys/sops"},next:{title:"Exposer vos conteneurs sans NAT avec Cloudflared",permalink:"/TheBidouilleur.xyz/docs/Homelab/cloudflared"}},l={},p=[{value:"Qu&#39;est ce qu&#39;un test unitaire ?",id:"quest-ce-quun-test-unitaire-",level:2},{value:"TestInfra",id:"testinfra",level:2},{value:"D\xe9buter avec testinfra",id:"d\xe9buter-avec-testinfra",level:3},{value:"Utiliser une machine distance (ssh)",id:"utiliser-une-machine-distance-ssh",level:2},{value:"Lancer le test depuis un code python",id:"lancer-le-test-depuis-un-code-python",level:2}],u={toc:p},d="wrapper";function _(e){let{components:t,...s}=e;return(0,r.kt)(d,(0,n.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"quest-ce-quun-test-unitaire-"},"Qu'est ce qu'un test unitaire ?"),(0,r.kt)("p",null,"On r\xe9serve souvent les tests unitaires pour le d\xe9veloppement. L'id\xe9e est d'injecter des informations dans des fonctions/m\xe9thodes et d'en v\xe9rifier le traitement."),(0,r.kt)("p",null,"Voici un exemple bref d'un test unitaire en python :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def convert_str_to_int(strvar):\n  if strvar.isdigit():\n    return str(strvar)\n  else:\n    return False\n    \nassert type(convert_str_to_int("4")) == int\n')),(0,r.kt)("p",null,'Ainsi, on v\xe9rifie via "assert" (g\xe9n\xe9rant une erreur si la condition renvoie un "False") que le type de ce que retourne la fonction convert_str_to_int() est bien de type "int".'),(0,r.kt)("p",null,"Mais est-il possible de cr\xe9er des tests unitaires pour v\xe9rifi\xe9 qu'un syst\xe8me soit \xe0 la bonne version ou bien parametr\xe9 ?"),(0,r.kt)("p",null,"Oui ! Grace \xe0 testinfra"),(0,r.kt)("h2",{id:"testinfra"},"TestInfra"),(0,r.kt)("h3",{id:"d\xe9buter-avec-testinfra"},"D\xe9buter avec testinfra"),(0,r.kt)("p",null,"Installer TestInfra se faire rapidement \xe0 partir de PIP:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 -m pip install pytest-testinfra\n")),(0,r.kt)("p",null,"Une fois install\xe9, nous pouvons cr\xe9er notre premier test :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'#test_host.py\ndef test_passwd_file(host):\n    passwd = host.file("/etc/passwd")\n    assert passwd.contains("root")\n    assert passwd.user == "root"\n    assert passwd.group == "root"\n    assert passwd.mode == 0o644 \n')),(0,r.kt)("p",null,'L\'objet "host" renvoie \xe0 la machine test\xe9e. Nous v\xe9rifions que le fichier ',(0,r.kt)("inlineCode",{parentName:"p"},"/etc/passwd")," contient bien ",(0,r.kt)("inlineCode",{parentName:"p"},"root"),', que son utilisateur/groupe propri\xe9taires soit bien "root", et qu\'il ait bien les permissions ',(0,r.kt)("em",{parentName:"p"},"(octales)")," 0o644."),(0,r.kt)("p",null,"Si on lance ce premier fichier via ",(0,r.kt)("inlineCode",{parentName:"p"},"py.test"),", voici le r\xe9sultat :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u2514\u2500\u25aapy.test test_host.py       \n============================================================================================= test session starts ==============================================================================================\nplatform linux -- Python 3.8.10, pytest-7.2.1, pluggy-1.0.0\nrootdir: /app, configfile: pytest.ini\nplugins: testinfra-7.0.0, xdist-3.1.0\ncollected 1 item                                                                                                                                                                                               \ntest_host.py .                                                                                                                                                                                           [100%]\n============================================================================================== 1 passed in 0.33s ===============================================================================================\n")),(0,r.kt)("p",null,"Aucune erreur dans ce test. Cr\xe9ons maintenant volontairement une erreur :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def test_passwd_file(host):\n    passwd = host.file("/etc/passwd")\n    assert passwd.contains("root")\n    assert passwd.user == "root"\n    assert passwd.group == "root"\n    assert passwd.mode == 0o644    \n\ndef test_appdir(host):\n    assert host.file("/appdir/").exists\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"============================================================================================= test session starts ==============================================================================================\nplatform linux -- Python 3.8.10, pytest-7.2.1, pluggy-1.0.0\nrootdir: /app, configfile: pytest.ini\nplugins: testinfra-7.0.0, xdist-3.1.0\ncollected 2 items                                                                                                                                                                                              \n\ntest_host.py .F                                                                                                                                                                                          [100%]\n\n=================================================================================================== FAILURES ===================================================================================================\n______________________________________________________________________________________________ test_appdir[local] ______________________________________________________________________________________________\n\nhost = <testinfra.host.Host local>\n\n    def test_appdir(host):\n>       assert host.file(\"/appdir/\").exists\nE       AssertionError: assert False\nE        +  where False = <file /appdir/>.exists\nE        +    where <file /appdir/> = <class 'testinfra.modules.base.GNUFile'>('/appdir/')\nE        +      where <class 'testinfra.modules.base.GNUFile'> = <testinfra.host.Host local>.file\n\ntest_host.py:12: AssertionError\n---------------------------------------------------------------------------------------------- Captured log call -----------------------------------------------------------------------------------------------\nDEBUG    testinfra:base.py:288 RUN CommandResult(command=b'test -e /appdir/', exit_status=1, stdout=None, stderr=None)\n=========================================================================================== short test summary info ============================================================================================\nFAILED test_host.py::test_appdir[local] - AssertionError: assert False\n========================================================================================= 1 failed, 1 passed in 0.17s ==========================================================================================\n")),(0,r.kt)("p",null,"Nous obtenons bel et bien notre erreur, et son d\xe9tail (la condition renvoy\xe9e est fausse, et nous avons la commande bash ",(0,r.kt)("inlineCode",{parentName:"p"},"test -e /app/dir")," test\xe9e)."),(0,r.kt)("p",null,"\xe0 partir de cette base, nous pouvons tester de nombreux \xe9l\xe9ments comme les fichiers, les interfaces, les packages install\xe9s et bien d'autres."),(0,r.kt)("admonition",{title:"Tips: Utiliser les workers",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Il est possible de lancer les tests \xe0 partir de workers ",(0,r.kt)("em",{parentName:"p"},"(Et donc lancer plusieurs taches en une seule fois)"),".\nIl suffit d'ajouter ",(0,r.kt)("inlineCode",{parentName:"p"},"-n auto")," ",(0,r.kt)("em",{parentName:"p"},"(ou remplacer auto par le nombre de workers)"),".")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://testinfra.readthedocs.io/en/latest/modules.html"},"Vous pourrez retrouver la liste des modules disponibles ici")),(0,r.kt)("h2",{id:"utiliser-une-machine-distance-ssh"},"Utiliser une machine distance (ssh)"),(0,r.kt)("p",null,"Tester notre propre machine est plutot utile, mais qu'en est-il de tester un serveur accessible par ssh ?"),(0,r.kt)("p",null,"Pour cela il suffit de surcharger la variable ",(0,r.kt)("em",{parentName:"p"},"testinfra_hosts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'testinfra_hosts = ["root@127.0.0.1", "user@192.168.1.2", "192.168.1.3"]\n\ndef test_passwd_file(host):\n    passwd = host.file("/etc/passwd")\n    assert passwd.contains("root")\n    assert passwd.user == "root"\n    assert passwd.group == "root"\n    assert passwd.mode == 0o644    \n')),(0,r.kt)("p",null,"Il faut bien s\xfbr avoir un acc\xe8s sans mot de passe pour que le test fonctionne. ",(0,r.kt)("em",{parentName:"p"},"(Un peu comme Ansible)")),(0,r.kt)("h2",{id:"lancer-le-test-depuis-un-code-python"},"Lancer le test depuis un code python"),(0,r.kt)("p",null,"Je n'appr\xe9cie que tr\xe8s peu le fait de lancer ",(0,r.kt)("inlineCode",{parentName:"p"},"py.test")," sans pouvoir rebondir sur le r\xe9sultat dans un Python."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import pytest\npytest.main(["-v", "--tb=native", "-rN", "-n", "auto"]) \n')),(0,r.kt)("p",null,"Et si on souhaite rebondir sur le r\xe9sultat du test :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import pytest\nresult = pytest.main(["-v", "--tb=native", "-rN", "-n", "auto"]) \n\nif result.name == "OK":\n    print("Le test est fonctionnel")\nelse:\n    print("Il y a une erreur dans le test")\n')),(0,r.kt)("p",null,"Pour l'instant, mon usage de testinfra s'arr\xe8te \xe0 \xe7a. Je n'ai pas d\xe9taill\xe9 les fonctionnements des modules ",(0,r.kt)("em",{parentName:"p"},"(socket, file, docker etc..)")," puisque la documentation est bien compl\xe8te."))}_.isMDXComponent=!0}}]);